import java.util.*;
public class Lecture31_Dynamic_Programming_Part2 {
    // WildCard Matching...
    public static boolean isMatch(String s, String p) {
        int n = s.length();
        int m = p.length();

        // Initialization 
        boolean dp[][] = new boolean[n+1][m+1];
        dp[0][0] = true;
        for(int i = 1; i<n+1; i++){
            dp[i][0] = true;
        }
        for(int j = 1; j<m+1; j++){
            if(p.charAt(j-1)=='*'){
                dp[0][j] = dp[0][j-1];
            }
        }

        // DP...
        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<m+1; j++){
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1)=='?'){
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p.charAt(j-1)=='*'){
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
                else{
                    dp[i][j] = false;
                }
            }
        } return dp[n][m];
}
    // Edit distance using Tabulation....
    public static int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        int dp[][] = new int[n+1][m+1];

        for(int i = 0; i<n+1; i++){
            for(int j = 0; j<m+1; j++){
                if(i==0){
                    dp[i][j] = j;
                }
                if(j==0){
                    dp[i][j] = i;
                }
            }
        }
        // DP...
        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<m+1; j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }
                else{
                    int add = dp[i][j-1] + 1;
                    int delete = dp[i-1][j] + 1;
                    // int replace = dp[i-1][j-1] + 1;
                    // dp[i][j] = Math.min(add, Math.min(delete,replace));
                    dp[i][j] = Math.min(add, delete);
                }
            }
        }
        return dp[n][m];
    }
    // Longest common increasing subsequence(Array) using Tabulation...
    public int lengthOfLIS(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i<nums.length; i++)  set.add(nums[i]);
        int arr[] = new int[set.size()];
        int i = 0;
        for(int n : set){
            arr[i] = n;
            i++;
        }
        Arrays.sort(arr);
        return longestCommonSubsequence(nums, arr);
    }
    public static int longestCommonSubsequence(int a[], int b[]){
        int n = a.length;
        int m = b.length;

        int dp[][] = new int[n+1][m+1];
        for(int i = 0; i<n+1; i++)
            for(int j = 0; j<m+1; j++)
                if(i==0||j==0)
                    dp[i][j] = 0;
        for(int i = 1; i<n+1; i++)
            for(int j = 1; j<m+1; j++)
                if(a[i-1]==b[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else{
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1,ans2);
                }
        return dp[n][m];
    }
    // Longest common substring(contineous seqence of character in a string) using Tabulation...
    public static int longestCommonSubstringTabulation(String s, String t){
        int n = s.length();
        int m = t.length();
        int ans = 0;

        int dp[][] = new int[n+1][m+1];
        for(int i = 0; i<n+1; i++){
            for(int j = 0; j<m+1; j++){
                if(i==0||j==0){
                    dp[i][j] = 0;
                }
            }
        }
        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<m+1; j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1]+1;
                    ans = Math.max(ans, dp[i][j]);
                }else{
                    dp[i][j] = 0;
                }
            }
        }
        return ans;
    }
    // Longest common subsequence using Tabulation... T -> O(n*m)
    public static int longestCommonTabulation(String s, String t){
        int n = s.length();
        int m = t.length();

        int dp[][] = new int[n+1][m+1];
        for(int i = 0; i<n+1; i++){
            for(int j = 0; j<m+1; j++){
                if(i==0||j==0){
                    dp[i][j] = 0;
                }
            } 
        }
        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<m+1; j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1]+1;
                }else{
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1,ans2);
                }
            }
        }
        return dp[n][m];
    }
    // Longest common subsequence using recursion... T -> O(n*m)
    public static int CommonSubseqence(String a, String b, int n, int m){
        if(n == 0 || m == 0) {  
            return 0;
        }
        if(a.charAt(n-1) == b.charAt(m-1)){
            return CommonSubseqence(a,b,n-1,m-1)+1;
        }else{
            int ans1 = CommonSubseqence(a,b,n-1,m);
            int ans2 = CommonSubseqence(a,b,n,m-1);
            // Taking out the maximum/longest subsequence of String
            return Math.max(ans1, ans2);
        }
    }
    // Longest common subsequence using memoization...
    public static int CommonSubseqenceMemo(String a, String b, int n, int m, int dp[][]){
        if(n == 0 || m == 0) {  
            return 0;
        }
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(a.charAt(n-1) == b.charAt(m-1)){
            return dp[n][m] = CommonSubseqenceMemo(a,b,n-1,m-1,dp)+1;
        }else{
            int ans1 = CommonSubseqenceMemo(a,b,n-1,m,dp);
            int ans2 = CommonSubseqenceMemo(a,b,n,m-1,dp);
            // Taking out the maximum/longest subsequence of String
            return dp[n][m] = Math.max(ans1, ans2);
        }
    }

    // Coin change...
    public static int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int dp[][] = new int[n+1][amount+1];

        // Initializing...
        for(int i = 0; i<n+1; i++){
            dp[i][0] = 1;
        }
        for(int j = 1; j<amount+1; j++){
            dp[0][j] = 0;
        }

        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<amount+1; j++){
                if(coins[i-1]<=j){ // Valid case
                    dp[i][j] = dp[i][j-coins[i-1]]+dp[i-1][j];
                  }else{ // Invalid case
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][amount];
    }
    public static void main(String[] args) {
        // Coin change -> any how this code is not gonna run on Leetcode i don't why...
        int arr[] = {2,5,3,6};
        int target = 10;
        System.out.println("Coin change..");
        System.out.println(coinChange(arr, target));

        // Longest common subsequence...
        String str1 = "abcdge";
        String str2 = "acdegb";
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];
        for(int i  = 0; i<n+1; i++){
            for(int j = 0; j<m+1; j++){
                dp[i][j] = -1;
            }
        }

        System.out.println("Longest common subsequence using Memoization...");
        System.out.println(CommonSubseqenceMemo(str1, str2, n, m, dp));

        System.out.println("Longest common subseqence using Tabulation...");
        System.out.println(longestCommonTabulation(str1, str2));

        String a = "ABCDE";
        String b = "ABGCE";

        System.out.println("Longest common SUBSTRING usint Tabulation....");
        System.out.println(longestCommonSubstringTabulation(a, b));

        String str = "pear";
        String s = "sea";

        System.out.println("Edit Distance Testing...");
        System.out.println(minDistance(str, s));

        String wild1 = "abce";
        String card2 = "abcd?";
        System.out.println(isMatch(wild1, card2));
    }
}
