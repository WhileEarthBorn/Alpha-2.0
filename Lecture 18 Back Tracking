public class Lecture18_Backtracking {

    public static boolean isSafer(int  sudoku[][],int row, int col, int i){
        // For column
        for(int a = 0;a<=8;a++){
            if(sudoku[a][col]==i){
                return false;
            }
        }
        // For row
        for(int j = 0;j<=8;j++){
            if(sudoku[row][j]==i){
                return false;
            }
        }

        // For grid

        int sr = (row/3)*3;
        int sc = (col/3)*3;
        for(int a = sr; a<sr+3;a++){
            for(int j = sc;j<sc+3;j++){
                if(sudoku[a][j]==i){
                    return false;
                }
            }
        }
        return true;

    }

    // Code of SUDOKU...
    public static boolean sudoku(int sudoku[][],int row,int col){
        // base case..
        if(row==9 && col==0){
            return true;
        }

        // Recursive call..
        int nextRow = row, nextCol = col+1;
        if(col+1==9){
            nextRow=row+1;
            nextCol=0;  
        }

        if(sudoku[row][col]!=0){
            return sudoku(sudoku, nextRow, nextCol);
        }

        for(int i = 1; i<=9;i++){
            if(isSafer(sudoku, row, col,i)){
                sudoku[row][col] = i;
                if(sudoku(sudoku,nextRow,nextCol)){
                    return true;
                }
                sudoku[row][col] = 0;
            }
        }
        return false;

    }

    public static int gridWays(int i, int j, int n, int m){
        if(i==n-1 && j==m-1){
            return 1;
        }   
        else if(i==n || j==n){
            return 0;
        }

        int w1 = gridWays(i+1, j, n, m);
        int w2 = gridWays(i, j+1, n, m);
        int ways = w1+w2;
        return ways;
    }

    // Real concept of backtracking...
    public static boolean isSafe(char board[][], int row, int col){
        // vertical up.
        for(int i = row-1 ; i>=0;i--){  
            if(board[i][col]=='Q'){
                return false;
            }
        }

        // Digonal left
        for(int i = row-1,j=col-1; i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }

        // Digonal right
        for(int i = row-1, j=col+1; i>=0 && j<board.length; i--, j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;

    }

    // Solving problems of N's Queens...
    // time complexity of NQueens is O(n!);
    public static void NQueens(char board[][], int n){
        if(n==board.length){
            printBoard(board);
            count++;
            return;
        }
        for(int j = 0; j<board.length;j++){
            if(isSafe(board,n,j)){
                board[n][j] = 'Q';
                NQueens(board, n+1);
                board[n][j] = 'X';
            }
        }
    }

    static int count = 0;
    public static void printBoard(char board[][]){
        System.out.println();
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board.length;j++){
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }

    // Finding permutation in a string..
    // This function has time and space commplexity of O(n * n!)..
    public static void FindingPermutation(String str, String ans){
        if(str.length()==0){
            System.out.println(ans);
            return;
        }

        for(int i = 0; i<str.length();i++){
            char c = str.charAt(i);
            String newStr = str.substring(0, i)+str.substring(i+1); //or i+1,str.length()
            FindingPermutation(newStr, ans+c);
        }

    }

    // Finding the largest subsets in a string array..
    // This function has time and space commplexity of O(n)..
    public static void FindingSubsets(String string,String ans,int i){
        if(i==string.length()){
            System.out.println(ans);
            return;
        }

        // Yes choice
        FindingSubsets(string, ans+string.charAt(i), i+1);
        // No choice
        FindingSubsets(string, ans, i+1);
    }

    public static void ChangeArray(int arr[],int i,int val){
        // base case
        if(i==arr.length){
            printArray(arr);
            return;
        }
        // recursive call...
        arr[i] = val;
        ChangeArray(arr, i+1, val+1);
        arr[i] = arr[i]-2;
    }
    
    public static void printArray(int arr[]){
        for(int i = 0; i<arr.length;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }

    public static void printSudoku(int sudoku[][]){
        for(int i = 0;i<9;i++){
            for(int j = 0;j<9;j++){
                System.out.print(sudoku[i][j]+"  ");
            }
            System.out.println();
        }
    }
    public static void main(String[] args) {

        // Backtracking on Array
        int arr[] = new int[5];
        ChangeArray(arr, 0, 1);
        printArray(arr);

        String str = "abc";
        FindingSubsets(str, "", 0);
        System.out.println();

        FindingPermutation(str, "");

        // Finding n Queens...
        System.out.println("      -------Chess-------      ");
        int n = 4;
        char board[][] = new char[n][n];

        for(int i = 0;i<n;i++){
            for(int j = 0; j<n;j++){
                board[i][j] = ' ';
            }
        }

        NQueens(board, 0);
        System.out.println(count);

        int a = 3, b = 3;
        System.out.println("Grid Ways!");
        System.out.println(gridWays(0, 0, a, b));
        System.out.println("Sudoku");

        int  sudoku[][] = {{0,0,8,0,0,0,0,0,0},
                           {4,9,0,1,5,7,0,0,2},
                           {0,0,3,0,0,4,1,9,0},
                           {1,8,5,0,6,0,0,2,0},
                           {0,0,0,0,2,0,0,6,0},
                           {9,6,0,4,0,5,3,0,0},
                           {0,3,0,0,7,2,0,0,4},
                           {0,4,9,0,3,0,0,5,7},
                           {8,2,7,0,0,9,0,1,2}
                        };

        if(sudoku(sudoku,0,0)){
            System.out.println("The solution is: ");
            printSudoku(sudoku);
        }

        else{
            System.out.println("Sorry, the solution does not exist..");
        }

    }
                                                                        
}
