public class Lecture31_Dynamic_Programming {
    // Function for knapsack using recursion...
    public static int Knapsack(int val[], int weight[], int W, int n){
        // If weight of the bag is filled then return 0. Or the item has been finished..
        if(W==0 || n==0)    return 0;
        // If weight  of item can be fited inside the bag then..
        if(weight[n-1]<=W){
            // Including in the bag..
            int num1 = val[n-1]+Knapsack(val, weight, W-weight[n-1], n-1);
            // Exculding in the bag..
            int num2 = Knapsack(val, weight, W, n-1);
            // Maximum profit..
            return Math.max(num1,num2);
        }
        // If not a valid answer then...
        else{
            return Knapsack(val, weight, W, n-1);
        }
    }

    // Function for knapsack using memoization DP...
    public static int KnapsackMemo(int val[], int weight[], int W, int n, int dp[][]){
        // If weight of the bag is filled then return 0. Or the item has been finished..
        if(W==0 || n==0)    return 0;
        // If weight  of item can be fited inside the bag then..
        if(dp[n][W] != -1)   return dp[n][W];

        if(weight[n-1]<=W){
            // Including in the bag..
            int num1 = val[n-1]+Knapsack(val, weight, W-weight[n-1], n-1);
            // Exculding in the bag..
            int num2 = Knapsack(val, weight, W, n-1);
            // Maximum profit..
            dp[n][W] =  Math.max(num1,num2);
            return dp[n][W];
        }
        // If not a valid answer then...
        else{
            dp[n][W] = Knapsack(val, weight, W, n-1);
            return dp[n][W];
        }
    }

    // Function for knapsack using Tabulation DP...
    // This is how the really DP is used in the real...
    // So read it so, much carefully...
    public static int knapsackTabulation(int val[], int wt[], int W){
        int n = val.length;
        int dp[][] = new int[n+1][W+1];
        for(int i = 0; i<dp.length; i++)  dp[i][0] = 0;
        for(int j = 0; j<dp[0].length; j++)  dp[0][j] = 0;
        for(int i = 1; i<n+1;i++){
            for(int j=1; j<W+1;j++){
                int v = val[i-1];
                int w = wt[i-1];
                if(w<=j){
                    int inc = v+dp[i-1][j-w];
                    int exc = dp[i-1][j];
                    dp[i][j] = Math.max(inc, exc);
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        print(dp);
        return dp[n][W];
    }
    // And this how we print...
    public static void print(int dp[][]){
        for(int i = 0; i<dp.length; i++){
            for(int j = 0; j<dp[0].length; j++){
                System.out.print(dp[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // This is encoded by knapsack problem...
    // Target Sum subset using Tabulation:-
    public static boolean TargetSum(int arr[], int sum){
        int n = arr.length;
        boolean dp[][] = new boolean[n+1][sum+1];
        for(int  i = 0; i<n+1; i++){
            dp[i][0] = true;
        }

        for(int i = 1; i<n+1; i++){
            for(int j = 1; j<sum+1; j++){
                int v = arr[i-1];

                if(v<=j && dp[i-1][j-v]==true){
                    dp[i][j] = true;
                }

                else if(dp[i-1][j] == true){
                    dp[i][j] = true;
                }

            }
        }
        printBol(dp);
        return dp[n][sum];
    } 

    // For printing how the work is going on...
    public static void printBol(boolean dp[][]){
        for(int i = 0; i<dp.length; i++){
            for(int j = 0; j<dp[0].length; j++){
                System.out.print(dp[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static int Unboundedknapsack(int val[], int wt[], int W){
        int n = val.length;
        int dp[][] = new int[n+1][W+1];
        for(int i = 0; i<dp.length; i++)  dp[i][0] = 0;
        for(int j = 0; j<dp[0].length; j++)  dp[0][j] = 0;
        for(int i = 1; i<n+1;i++){
            for(int j=1; j<W+1;j++){
                if(wt[i-1] <= j){
                    dp[i][j] = Math.max(val[i-1] + dp[i][j-wt[i-1]], dp[i-1][j]); 
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][W];
    }
    public static void main(String[] args) {
        // Before parts see in copy...
        // Knapsack problem using recursion..
        int val[] = {15,14,10,45,30};
        int weight[] = {2,5,1,3,4};
        int W = 7;

        System.out.println("Knapsack using recursion: \n"+Knapsack(val, weight, W, val.length));

        // knapsack using memoization...
        int dp[][] = new int[val.length+1][W+1];
        for(int i = 0; i<dp.length; i++){
            for(int j = 0; j<dp[0].length; j++){
                dp[i][j] = -1;
            }
        }

        System.out.println("Knapsack using Memoization: \n" + KnapsackMemo(val, weight, W, val.length, dp));

        System.out.println("Knapsack using Tabulation: \n"+ knapsackTabulation(val, weight, W));

        int arr[] = {4,2,7,1,3};
        System.out.println("Target sum using Tabulation: \n" + TargetSum(arr, 15));

        System.out.println("Unbounded Knapsack: \n"+ Unboundedknapsack(val, weight, W));

    }
}
