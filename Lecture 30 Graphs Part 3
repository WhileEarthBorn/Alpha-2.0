import java.util.*;
public class Lecture30_Graphs_Part3 {
    static class Edge{
        int src;
        int dest;
        int weight;

        public Edge(int s, int d, int w){
            this.src = s; 
            this.dest = d;
            this.weight = w;
        }
    }
    public static void CreateGraphs(ArrayList<Edge> graph[]){
        for(int i = 0; i<graph.length; i++){
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1, 10));
        graph[0].add(new Edge(0, 2, 15));
        graph[0].add(new Edge(0, 3, 30));
        
        graph[1].add(new Edge(1, 0, 10));
        graph[1].add(new Edge(1, 3, 40));

        
        graph[2].add(new Edge(2, 0, 15));  
        graph[2].add(new Edge(2, 3, 50));  

        graph[3].add(new Edge(3, 1, 40));   
        graph[3].add(new Edge(3, 2, 50));   

    }
    // Dijkstra's Alog(All path source to target) -> BFS:-
    static class Pair implements Comparable<Pair>{
        int n;
        int path;

        public Pair(int n , int path){
            this.n = n;
            this.path = path;
        }

        @Override
        public int compareTo(Pair p2){
            return this.path - p2.path;
        }
    }

    public static void Dijskatras(ArrayList<Edge> graph[], int src){
        int dist[] = new int[graph.length];
        for(int i = 0; i<graph.length; i++){
            if(i!=src){
                dist[i] = Integer.MAX_VALUE;
            }
        }
        boolean visited[] = new boolean[graph.length];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(src, 0));

        while(!pq.isEmpty()){
            Pair curr = pq.remove();
            if(!visited[curr.n]){ 
                visited[curr.n] = true;
                for(int i = 0; i<graph[curr.n].size(); i++){
                    Edge e = graph[curr.n].get(i);
                    int u = e.src;
                    int v = e.dest;
                    int w = e.weight;

                    if(dist[u] + w < dist[v]){
                        dist[v] = dist[u] + w;
                        pq.add(new Pair(v, dist[v]));
                    }
                }
            }
        }

        for(int i = 0; i<dist.length; i++){
            System.out.print(dist[i]+" ");
        }
        System.out.println();
        
    }
    // Bellman Ford's Algorithm (All path from src to tar using DP):- T -> O(V*E).
    public static void BellmanFordAlgo(ArrayList<Edge> graph[], int src){
        int dist[] = new int[graph.length];
        for(int i = 0; i<dist.length; i++){
            if(i != src){
                dist[i] = Integer.MAX_VALUE;
            }
        }
        // Algorithm..
        for(int i = 0; i<graph.length-1; i++){
            for(int j = 0; j<graph.length; j++){
                for(int k = 0; k<graph[j].size(); k++){
                    Edge e = graph[j].get(k);
                    int u = e.src;
                    int v = e.dest;
                    int w = e.weight;

                    if(dist[u] != Integer.MAX_VALUE && dist[u] + w < dist[v]){
                        dist[v] = dist[u] + w;  
                    }
                }
            }
        }
        for(int  i = 0; i<dist.length; i++){
            System.out.print(dist[i]+" ");
        }
        System.out.println(); 
    }

    // Prim's Algorithm -> MST (Minimum spanning tree):-
    public static class Pairs implements Comparable<Pairs>{
        int v;
        int cost;

        public Pairs(int v , int cost){
            this.v = v;
            this.cost = cost;
        }

        @Override
        public int compareTo(Pairs p2){
            return this.cost - p2.cost;
        }
    }
    public static int primsAlgo(ArrayList<Edge> graph[]){
        boolean vis[] = new boolean[graph.length];
        PriorityQueue<Pairs> pq = new PriorityQueue<>();
        pq.add(new Pairs(0, 0));
        int cost = 0;

        while(!pq.isEmpty()){
            Pairs curr = pq.remove();
            if(!vis[curr.v]){
                vis[curr.v] = true;
                cost += curr.cost;

                for(int  i = 0; i<graph[curr.v].size(); i++){
                    Edge e = graph[curr.v].get(i);
                    pq.add(new Pairs(e.dest, e.weight));
                }
            }
        }
        return cost;
    }


    public static void main(String[] args) {
        int V = 4;
        ArrayList<Edge> graph[] = new ArrayList[V];
        CreateGraphs(graph);

        // Dijskatras(graph, 0);
        // BellmanFordAlgo(graph, 0);
        System.out.println(primsAlgo(graph));
        

    }
}
