import java.util.*;
public class Lecture30_Graphs_Part4 {
    // for connecting cities....
    static class Edges implements Comparable<Edges>{
        int dest;
        int cost;
    
        public Edges(int d, int c){
            this.dest = d;
            this.cost = c; 
        }
        @Override
        public int compareTo(Edges e2){
            return this.cost - e2.cost;
        }
    }

    static class Edge{
        int src;
        int dest;
        int weight;
    
        public Edge(int s, int d, int w){
            this.src = s; 
            this.dest = d;
            this.weight = w;
        }
    }

    // public static void CreateGraphs(ArrayList<Edge> graph[]){
    //     for(int i = 0; i<graph.length; i++){
    //         graph[i] = new ArrayList<Edge>();
    //     }

    //     graph[0].add(new Edge(0, 1, 10));
    //     graph[0].add(new Edge(0, 2, 15));
    //     graph[0].add(new Edge(0, 3, 30));
        
    //     graph[1].add(new Edge(1, 0, 10));
    //     graph[1].add(new Edge(1, 3, 40));

        
    //     graph[2].add(new Edge(2, 0, 15));  
    //     graph[2].add(new Edge(2, 3, 50));  

    //     graph[3].add(new Edge(3, 1, 40));   
    //     graph[3].add(new Edge(3, 2, 50));   

    // }

    // for cheapest flights within k stops...


    public static void CreateGraph(int flights[][] ,ArrayList<Edge> graph[]){
        for(int i = 0; i<graph.length; i++){
            graph[i] = new ArrayList<Edge>();
        }

        for(int i = 0; i<flights.length; i++){
            int src = flights[i][0];
            int target = flights[i][1];
            int weight = flights[i][2]; 

            Edge e = new Edge(src, target, weight);
            graph[src].add(e);
        }

    }

    // Dijkstra's Alog(All path source to target) -> BFS:-
    static class Pair implements Comparable<Pair>{
        int n;
        int path;

        public Pair(int n , int path){
            this.n = n;
            this.path = path;
        }

        @Override
        public int compareTo(Pair p2){
            return this.path - p2.path;
        }
    }
    
    public static void Dijskatras(ArrayList<Edge> graph[], int src){
        int dist[] = new int[graph.length];
        for(int i = 0; i<graph.length; i++){
            if(i!=src){
                dist[i] = Integer.MAX_VALUE;
            }
        }
        boolean visited[] = new boolean[graph.length];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(src, 0));

        while(!pq.isEmpty()){
            Pair curr = pq.remove();
            if(!visited[curr.n]){ 
                visited[curr.n] = true;
                for(int i = 0; i<graph[curr.n].size(); i++){
                    Edge e = graph[curr.n].get(i);
                    int u = e.src;
                    int v = e.dest;
                    int w = e.weight;

                    if(dist[u] + w < dist[v]){
                        dist[v] = dist[u] + w;
                        pq.add(new Pair(v, dist[v]));
                    }
                }
            }
        }

        for(int i = 0; i<dist.length; i++){
            System.out.print(dist[i]+" ");
        }
        System.out.println();
    }

    static class Info{
        int v;
        int cost;
        int stops;

        public Info(int v, int c, int s){
            this.v = v;
            this.cost = c;
            this.stops = s;
        }
    }

    // Q - Cheapest flights within K stops...
    public static int  cheapestFlights(int n, int flights[][], int src, int dest, int k){
        ArrayList<Edge> graph[] = new ArrayList[n];
        CreateGraph(flights, graph);


        int dist[] = new int[n];
        for(int  i = 0; i<dist.length; i++){
            if(i!=src){
                dist[i] = Integer.MAX_VALUE;
            }
        }

        Queue<Info> q = new LinkedList<>();
        q.add(new Info(src, 0, 0));

        while(!q.isEmpty()){
            Info curr = q.remove();
            if(curr.stops>k){
                break;
            }
            for(int  i = 0; i<graph[curr.v].size(); i++){
                Edge e = graph[curr.v].get(i);
                int v = e.dest;
                int w = e.weight;

                if(curr.cost + w < dist[v] && curr.stops<=k){
                    dist[v] = curr.cost + w;
                    q.add(new Info(v, dist[v], curr.stops+1));
                }
            }

        }
        if(dist[dest]==Integer.MAX_VALUE){
            return -1;
        }
        else{
            return dist[dest];
        }
    }

    // Connecting cities with Minimum cost:-
    public static int connect(int cities[][]){
        PriorityQueue<Edges> p = new PriorityQueue<>();
        boolean visited[] = new boolean[cities.length];

        p.add(new Edges(0, 0));
        int finalcost = 0;

        while(!p.isEmpty()){
            Edges curr = p.remove();
            if(!visited[curr.dest]){    
                visited[curr.dest] = true;
                finalcost += curr.cost;

                for(int  i = 0;i<cities[curr.dest].length; i++){
                    if(cities[curr.dest][i]!=0){
                        p.add(new Edges(i, cities[curr.dest][i]));
                    }
                }
            }
        }
        return finalcost;
    }

    public static void main(String[] args) {
        // For Dijskartas Algorithm
        // int V = 4;
        // ArrayList<Edge> graph[] = new ArrayList[V];
        // CreateGraphs(graph);
        // Dijskatras(graph, 0);

        // For Cheapest flights
        // int n = 3;
        // int flights[][] = {{0,1,100},{1,2,100},{0,2,500}};
        // int src = 0;int dest = 2; int k = 1;
        // System.out.println(cheapestFlights(n, flights, src, dest, k));

        // For connecting cities..
        int cities[][] = {{0,1,2,3,4},
                          {1,0,5,0,7},
                          {2,5,0,6,0},
                          {3,0,6,0,0},
                          {4,7,0,0,0}};
        System.out.println(connect(cities));

    }
}
