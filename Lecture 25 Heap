import java.util.*;
public class Lecture27_HeapPriority_Queue {
    // Sliding Window Maximum:-
    static class Pairs implements Comparable<Pairs>{
        int val;
        int idx;

        public Pairs(int val, int idx){
            this.val = val;
            this.idx = idx;
        }
        @Override
        public int compareTo(Pairs p){
            return p.val - this.val;
        }
    } 
    // K weakest soldiers in a Row:-
    static class Row implements Comparable<Row>{
        int soldiers;
        int index;

        public Row(int soldiers, int index){
            this.soldiers = soldiers;
            this.index = index;
        }

        @Override 
        public int compareTo(Row r){
            if(this.soldiers == r.soldiers){
                return this.index - r.index;
            }
            else{
                return this.soldiers - r.soldiers;
            }
        }
    }
    // For K closest points to the Origin:-
    static class Points implements Comparable<Points>{
        int x; int y;
        int distance;
        int i;

        public Points(int x, int y, int distance, int i){
            this.x = x;
            this.y = y;
            this.distance = distance;
            this.i = i;
        }

        @Override 
        public int compareTo(Points p2){
            return this.distance-p2.distance;
        }
    }
    // Today's code is here:- T -> O(log n)
    static class Heap{
        ArrayList<Integer> list = new ArrayList<>();
        public void add(int data){
            list.add(data);

            int x = list.size()-1; // child's index
            int parent = (x-1)/2; // parent index

            // To swap the values..
            while(list.get(x)<list.get(parent)){
                int temp = list.get(x);
                list.set(x, list.get(parent));
                list.set(parent, temp);

                x = parent;
                parent = (x-1)/2;

            }
        }    
        // this code is to find the minimum value in heap:-
        public int peek() {
            return list.get(0);
        }

        // this code is to delete in a heap:- T -> O(log n)
        public int remove(){
            int data = list.get(0);
            int temp = list.get(0);
            list.set(0, list.get(list.size()-1));
            list.set(list.size()-1, temp);
            list.remove(list.size()-1);
            heapify(0);
            return data;
        }
        // This is function to purify the remove functions:-
        private void heapify(int i){
            int l = 2*i+1;
            int r = 2*i+2;
            int min = i;

            if(l<list.size() && list.get(min)>list.get(l)){
                min = l;
            }
            if(r<list.size() && list.get(min)>list.get(r)){
                min = r;
            }
            if(min!=i){
                int temp = list.get(i);
                list.set(i, list.get(min));
                list.set(min, temp);
                heapify(min);
            }
        }
        // And the function to calculate the empty function:-
        public boolean empty(){
            return list.size()==0;
        }
}


    // Creating Priority Queue object:-
    static class Student implements Comparable<Student>{ //Overriding.
        String name;
        int rank;
        
        public Student(String name, int rank){
            this.name = name;
            this.rank = rank;
        }
        
        @Override
        public int compareTo(Student s2){
            return this.rank - s2.rank;
        }
    }

    // Creating function for sorting an array which is Heap Sort... T -> O(n log n)
    public static void HeapSort(int arr[]){
        int n = arr.length;
        for(int i = 0; i<n/2; i++){
            heapify(arr,i, n);
        }

        for(int i = n-1; i>=0; i--){
            int temp =  arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            heapify(arr,0,i);
        }
    }

    // Function to pure the Heap Sort function:-
    public static void heapify(int arr[], int i, int size){
        int l = 2*i+1;
        int r = 2*i+2;
        int max = i;

        if(l < size && arr[l] > arr[max]){
            max = l;
        }
        if(r < size && arr[r] > arr[max]){
            max = r;
        }
        if(max != i){
            int temp = arr[i];
            arr[i] = arr[max];
            arr[max] = temp;

            heapify(arr, max, size);
        }
    }
    
    
    public static void main(String[] args) {
        // Creating a Priority Queue:-
        // If we have to compare the student in descending order then,
            // PriorityQueue<Integer> priorityQueue =  new PriorityQueue<>(Comparator.reverseOrder());
        // PriorityQueue<Integer> priorityQueue =  new PriorityQueue<>();
        
        // priorityQueue.add(1);
        // priorityQueue.add(2);
        // priorityQueue.add(3);
        // priorityQueue.add(4);
        // priorityQueue.add(5);
        // priorityQueue.remove(3);
        // priorityQueue.peek();

        // System.out.println(pQueue);
        System.out.println();
        PriorityQueue<Student> pQueue =  new PriorityQueue<>();
        pQueue.add(new Student("A", 1));
        pQueue.add(new Student("B", 3));
        pQueue.add(new Student("C", 0));
        pQueue.add(new Student("D", 2));
        pQueue.peek();
        while(!pQueue.isEmpty()){
            System.out.println(pQueue.peek().name +" -> "+pQueue.peek().rank);
            pQueue.remove();
        }
        System.out.println();
        // Finally, coming to Heap data Sturucture :
        //                              *Notes*
        // Properties of Heap data Structure:-
            // 1).Binary Tree(Always a binary tree):- at most 2 childrens.
            // 2).Heap is Complete Binary tree:- both the left and right nodes of tree will be same.
            // 3).Heap Order Property:- 1) Children.data always greater than Parent -> (Min Heap).  
            //                          2) Children.data always smaller than Parent -> (Max Heap).

        // If you want to find the index of childs then:-
                // 1). left = 2i+1.
                // 2). right = 2i+2.
        // And if you want to find the index of parent then:-
                // (x-1)/2 -> here x is left index or right index the value you are starting from.

        // Creating a heap:-
        Heap heap = new Heap();
        heap.add(1);
        heap.add(11);
        heap.add(3);
        heap.add(2);
        while(!heap.empty()){
            System.out.println(heap.peek());
            heap.remove();
        }

        // Sorting of Heap:-
        int arr[] = {1,2,4,5,3};
        HeapSort(arr);
        for(int i = 0; i<arr.length; i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();

    // And finally, here comes the first question on the heap data structure:-
    // Nearest Cars(in leetcode k closest point to origin:-

    int poo[][] = {{3,3},{5,-1},{-2,4}}; int k = 2;
    PriorityQueue<Points> points = new PriorityQueue<>();
    for(int i = 0; i<poo.length; i++){
        int dis = poo[i][0]*poo[i][0]+poo[i][1]*poo[i][1];
        points.add(new Points(poo[i][0], poo[i][1], dis, i));    
    }
    for(int i = 0; i<k; i++){
        System.out.println(points.remove().i);
    }

    // Connect n ropes with minimum cost:-
    int ropes[] = {2,3,3,4,6};
    PriorityQueue<Integer> pq = new PriorityQueue<>();
    for(int i = 0; i<ropes.length; i++){
        pq.add(ropes[i]);
    }
    int cost = 0;
    while(pq.size()>1){
        int min = pq.remove();
        int min2 = pq.remove();
        cost += min + min2;
        pq.add(min+min2);
    }
    System.out.println("The minmum money you have to give is:- "+cost);

    System.out.println("K weakest soldier in a Row: ");
    int mat[][] = {{1,0,0,0},
                    {1,1,1,1},
                    {1,0,0,0},
                    {1,0,0,0}};
    int ki = 2;
    PriorityQueue<Row> p = new PriorityQueue<>();
        for(int i = 0; i<mat.length; i++){
            int count = 0;
            for(int j = 0; j<mat[0].length; j++){
                count += mat[i][j] == 1 ? 1 : 0;
            }
            p.add(new Row(count, i));
        }
        for(int i = 0; i<ki; i++){
            System.out.println("R"+p.remove().index);
        }   

        System.out.println("Sliding Window Maximum:- ");

        int array[] = {1,3,-1,-3,5,3,6,7};
        int K = 3;
        int res[] = new int[array.length-K+1];

        PriorityQueue<Pairs> pairs = new PriorityQueue<>();

        for(int i = 0; i<K; i++){
            pairs.add(new Pairs(array[i], i));
        }

        res[0] = pairs.peek().val;

        for(int i = K; i<array.length; i++){
            while(pairs.size()>0 && pairs.peek().idx <= (i-K)){
                pairs.remove();
            }

            pairs.add(new Pairs(array[i], i));
            res[i-K+1] = pairs.peek().val;
        }

        for(int  i = 0; i<res.length; i++){
            System.out.print(res[i]+" ");
        }
        System.out.println();

    }
}
