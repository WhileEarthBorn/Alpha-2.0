import java.util.*;
public class Lecture30_Graphs_Part5 {
    static class Edge implements Comparable<Edge>{
        int src;
        int dest;
        int weight;
    
        public Edge(int s, int d, int w){
            this.src = s;
            this.dest = d;
            this.weight = w; 
        }
        @Override
        public int compareTo(Edge e2){
            return this.weight - e2.weight;
        }
    }
    // Disjoint Set Union... t -> O(1).
    static int n = 7;
    static int par[] = new int[n];
    static int rank[] = new int[n];

    public static void init(){
        for(int i = 0; i<n; i++){
            par[i] = i;         
        }
    }
    public static int find(int x){
        if(x==par[x]){
            return x;
        }
        return find(par[x]);
    }
    public static void union(int a, int b){
        int parA = find(a);
        int parB = find(b);

        if(rank[parA]==rank[parB]){
            par[parB] = parA;
            rank[parA]++;
        }else if(rank[parA]<rank[parB]){
            par[parA] = parB;
        }else{
            par[parB] = parA;
        }
    }

    // Code to create a graph for Kruskal's Algorithm... 
    static void create(ArrayList<Edge> edges){
        edges.add(new Edge(0, 1, 10));
        edges.add(new Edge(0, 2, 15));
        edges.add(new Edge(0, 3, 30));
        edges.add(new Edge(1, 3, 40));
        edges.add(new Edge(2, 3, 50));
    }

    // Kruskal's Algorithm... t > o( V+E log e)...
    public static void Kruskals(ArrayList<Edge> edges , int V){
        init();
        Collections.sort(edges);
        int min = 0;
        int count = 0;
        for(int i = 0; count<V-1; i++){
            Edge e = edges.get(i);

            int parA = find(e.src);
            int parB = find(e.dest);
            if(parA!=parB){
                union(e.src, e.dest);
                min+=e.weight;
                count++;
            } 
        }
        System.out.println(min);
    }

    public static void main(String[] args) {
        // init();
        // union(1, 3);
        // System.out.println(find(3));
        // union(2, 4);
        // union(3, 6);
        // union(1, 4);
        // System.out.println(find(3));
        // System.out.println(find(4));
        // union(1, 5);
        int V = 4;
        ArrayList<Edge> edges = new ArrayList<>();
        create(edges);
        Kruskals(edges, V);
    }
}


