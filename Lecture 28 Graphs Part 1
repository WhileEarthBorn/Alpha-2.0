import java.util.*;
public class Lecture30_Graphs {
    // Creating Edge class:-
    static class Edge{
        int src;
        int dest;
        int weight;
        
        public Edge(int s, int d, int w){
            this.src = s; 
            this.dest = d;
            this.weight = w;
        }
    }

    // Function for creating/storing a graph:-
    public static void CreateGraphs(ArrayList<Edge> graph[]){
        for(int i = 0; i<graph.length; i++){
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        graph[0].add(new Edge(1, 0, 1));
        graph[0].add(new Edge(1, 3, 1));

        graph[0].add(new Edge(2, 0, 1));
        graph[0].add(new Edge(2, 4, 1));

        graph[0].add(new Edge(3, 1, 1));
        graph[0].add(new Edge(3, 4, 1));
        graph[0].add(new Edge(3, 5, 1));

        graph[0].add(new Edge(4, 2, 1));
        graph[0].add(new Edge(4, 3, 1));
        graph[0].add(new Edge(4, 5, 1));

        graph[0].add(new Edge(5, 3, 1));
        graph[0].add(new Edge(5, 4, 1));
        graph[0].add(new Edge(5, 6, 1));

        graph[0].add(new Edge(6, 5, 1));

    }

    public static void BFS(ArrayList<Edge> graph[]){
        boolean visited[] = new boolean[graph.length];
        for(int i = 0; i<graph.length; i++){
            if(!visited[i]){
                BreathFirstSearch(graph, visited);
            }
        }
    }
    
    public static void BreathFirstSearch(ArrayList<Edge> graph[], boolean visited[]){
        Queue<Integer> q = new LinkedList<>();
        q.add(0);

        while(!q.isEmpty()){
            int curr = q.remove();
            if(!visited[curr]){
                System.out.print(curr+" ");
                visited[curr] = true;
                for(int i = 0; i<graph[curr].size(); i++){
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }

    // public static void BreathFirstSearch(ArrayList<Edge> graph[], int V, int start, boolean visited[]){
    //     Queue<Integer> queue = new LinkedList<>();
    //     queue.add(start);
    //     while(!queue.isEmpty()){
    //         int curr = queue.remove();
    //         if(visited[curr]==false){
    //             System.out.println(curr + " ");
    //             visited[curr] = true;
                
    //             for(int  i = 0; i<graph[curr].size(); i++){
    //                 Edge e = graph[curr].get(i);
    //                 queue.add(e.dest);
    //             }
    //         }
    //     }
    // }
    public static void DFS(ArrayList<Edge> graph[]){
        boolean vis[] = new boolean[graph.length];
        for(int i = 0; i<graph.length; i++){
                DepthFirstSearch(graph, i, vis);
        }
    }
    public static void DepthFirstSearch(ArrayList<Edge> graph[], int curr, boolean visited[]){
        System.out.print(curr+" ");
        visited[curr] = true;
        for(int i = 0; i<graph[curr].size(); i++){
            Edge e = graph[curr].get(i); 
            if(!visited[e.dest])
                DepthFirstSearch(graph, e.dest, visited);
        }
        
    }

    public static void main(String[] args) {
        // Creating a Graph (*-*) :-
        int V = 7;
        ArrayList<Edge> graph[] = new ArrayList[V];
        CreateGraphs(graph);
        boolean visited[] = new boolean[V];
        
        // for(int i = 0; i<graph[2].size(); i++){
            //     Edge e = graph[2].get(i);
            //     System.out.print(" Source : "+e.src+" -> fDestination : "+e.dest);
            // }
            
        // Breath-First-Search:-
        // CreateGraphs(graph);
        // System.out.println("Using Breadth-First-Search on graph:- ");
        // for(int i = 0; i<V; i++){
        //     if(visited[i]==false){
        //         BreathFirstSearch(graph, V, 0, visited);
        //     }
        // }
        // System.out.println();

        // Depth-First-Search:- 
        System.out.println("Using Depth-First-Search on graph:- ");
        DepthFirstSearch(graph, 0, new boolean[V]);

        // total number of paths source to target:-

        // int src = 0;
        // int tar = 5;
        // boolean vis[] = new boolean[V];
        // vis[src] = true;
        // printAllPaths(graph, src, tar, ""+src, vis);
        System.out.println("\n"+"Has Path:-");
    }
}
